{"version":3,"sources":["college_01.jpg","college_02.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","collegejson","colleges","slice","collegeJsonTemp","setCollegeJsonTemp","useEffect","window","addEventListener","handleScroll","removeEventListener","innerHeight","document","documentElement","scrollTop","offsetHeight","setTimeout","className","map","collegeItem","index","key","style","backgroundImage","college1","college2","promoted","fontSize","fontWeight","textAlign","rating","rating_remarks","tags","item","ranking","college_name","nearest_place","famous_nearest_places","offertext","color","textDecoration","original_fees","discount","discounted_fees","fees_cycle","amenties","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+v5BAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gNCoF5BC,MA/Ef,WAAgB,IAAD,EACgCC,mBAASC,EAAYC,SAASC,MAAM,EAAE,KADtE,mBACNC,EADM,KACUC,EADV,KAEbC,qBAAU,WAER,OADAC,OAAOC,iBAAiB,SAAUC,GAC3B,kBAAMF,OAAOG,oBAAoB,SAAUD,MACjD,IACH,IAAMA,EAAe,WACfF,OAAOI,YAAcC,SAASC,gBAAgBC,WAAaF,SAASC,gBAAgBE,aAAa,IACrGC,YAAW,kBAAIX,EAAmBJ,EAAYC,YAAU,MAE1D,OACE,yBAAKe,UAAU,OACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,YAAd,2BACA,6BACCb,EAAgBc,KAAI,SAACC,EAAYC,GAChC,OACE,yBAAKH,UAAU,MAAMI,IAAKD,GACxB,yBAAKH,UAAU,QACb,yBAAKA,UAAU,aAAaK,MAAO,CAACC,gBAAgB,uEAACH,EAAM,IAAI,GAAGA,EAAM,IAAI,EAAmEI,IAA4EC,IAAvK,OACjDN,EAAYO,SAAS,yBAAKT,UAAU,aACnC,yCACK,KACP,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,2BAAG,0BAAMK,MAAO,CAACK,SAAS,OAAQC,WAAW,OAAQC,UAAU,WAAYV,EAAYW,QAAvF,OACA,2BAAIX,EAAYY,iBAElB,yBAAKd,UAAU,UACZE,EAAYa,KAAKd,KAAI,SAACe,EAAKb,GAC1B,OACE,yBAAKH,UAAU,cAAcI,IAAKD,GAC/Ba,MAIP,yBAAKhB,UAAU,eAAf,IACIE,EAAYe,YAKtB,yBAAKjB,UAAU,WACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,eAAeE,EAAYgB,aAAzC,IAAwD,MACtD,0BAAMlB,UAAU,uBAChB,0BAAMA,UAAU,uBAChB,0BAAMA,UAAU,uBAChB,0BAAMA,UAAU,uBAChB,0BAAMA,UAAU,gBAElB,wBAAIA,UAAU,UAAUE,EAAYiB,cAAc,GAAlD,IAAsD,0BAAMnB,UAAU,YAAhB,KAA8BE,EAAYiB,cAAc,IAA9G,KACA,wBAAInB,UAAU,cAAa,0BAAMA,UAAU,SAAhB,eAA2CE,EAAYkB,uBAClF,yBAAKpB,UAAU,SACZE,EAAYmB,UADf,IAC0B,0BAAMhB,MAAO,CAACiB,MAAM,YAApB,WAG5B,yBAAKtB,UAAU,gBACb,4BAAI,0BAAMK,MAAO,CAACkB,eAAe,eAAeb,SAAS,SAArD,UAAuER,EAAYsB,cAAnF,KAAyG,8BAAM,wBAAIxB,UAAU,YAAW,4BAAKE,EAAYuB,aAC7J,wBAAIzB,UAAU,SAAd,UAA+BE,EAAYwB,iBAC3C,uBAAGrB,MAAO,CAACiB,MAAM,UAAUZ,SAAS,SAAUR,EAAYyB,YAC1D,yBAAKtB,MAAO,CAACiB,MAAM,UAAUX,WAAW,OAAOD,SAAS,SAAS,wBAAIV,UAAU,UAAUE,EAAY0B,SAAS3B,KAAI,SAACe,EAAKb,GACtH,OACE,wBAAIC,IAAKD,GACNa,kBCzDPa,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASyC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.99450456.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/college_01.8793ec0e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/college_02.619ee97e.jpg\";","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport college1 from './college_01.jpg';\nimport college2 from './college_02.jpg';\nimport collegejson from './colleges.json';\nfunction App() {\n  const [collegeJsonTemp,setCollegeJsonTemp] = useState(collegejson.colleges.slice(0,25));\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n  const handleScroll = () =>{\n    if (window.innerHeight + document.documentElement.scrollTop <= document.documentElement.offsetHeight-20) return;\n    setTimeout(()=>setCollegeJsonTemp(collegejson.colleges),2000);\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"body\">\n        <h3 className=\"colleges\">Colleges in North India</h3>\n        <br></br>\n        {collegeJsonTemp.map((collegeItem,index)=>{\n          return (      \n            <div className=\"col\" key={index}>\n              <div className=\"card\">\n                <div className=\"hero-image\" style={{backgroundImage:(index%4===0||index%4===3)?`linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${college1})`:`linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${college2})`}}>\n                  {collegeItem.promoted?<div className=\"promotion\">\n                    <h3>PROMOTED</h3>\n                  </div>:null}\n                  <div className=\"hero-text\">\n                    <div className=\"top\">\n                      <p><span style={{fontSize:\"20px\", fontWeight:\"bold\", textAlign:\"center\"}}>{collegeItem.rating}</span> /5</p>\n                      <p>{collegeItem.rating_remarks}</p>\n                    </div>\n                    <div className=\"bottom\">\n                      {collegeItem.tags.map((item,index)=>{\n                        return (\n                          <div className=\"bestcollege\" key={index}>\n                            {item}\n                          </div>\n                        )\n                      })}\n                      <div className=\"bottomright\">\n                        #{collegeItem.ranking}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"content\">\n                  <div className=\"leftcontent\">\n                    <h1 className=\"collegename\">{collegeItem.college_name} {'   '}\n                      <span className=\"fa fa-star checked\"></span>\n                      <span className=\"fa fa-star checked\"></span>\n                      <span className=\"fa fa-star checked\"></span>\n                      <span className=\"fa fa-star checked\"></span>\n                      <span className=\"fa fa-star\"></span>\n                    </h1>\n                    <h3 className=\"nearby\">{collegeItem.nearest_place[0]} <span className=\"awayfrom\">| {collegeItem.nearest_place[1]}</span> </h3>\n                    <h2 className=\"morenearby\"><span className=\"match\">93% Match :</span>{collegeItem.famous_nearest_places}</h2>\n                    <div className=\"offer\">\n                      {collegeItem.offertext} <span style={{color:\"#1999d2\"}}>LOGIN</span> \n                    </div>\n                  </div>\n                  <div className=\"rightcontent\">\n                    <h5><span style={{textDecoration:\"line-through\",fontSize:\"15px\"}}>&#8377; {collegeItem.original_fees} </span><span><ul className=\"discount\"><li>{collegeItem.discount}</li></ul></span></h5>\n                    <h2 className=\"price\">&#8377; {collegeItem.discounted_fees}</h2>\n                    <p style={{color:\"#444444\",fontSize:\"14px\"}}>{collegeItem.fees_cycle}</p>\n                    <div style={{color:\"#37b396\",fontWeight:\"bold\",fontSize:\"17px\"}}><ul className=\"cancel\">{collegeItem.amenties.map((item,index)=>{\n                      return (\n                        <li key={index}>\n                          {item}\n                        </li>\n                      )\n                    })}</ul></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}